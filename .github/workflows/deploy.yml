name: Build & Deploy API (api-prod)
run-name: ${{ github.actor }} is deploying API to production üöÄ

on:
  push:
    branches: [main]

env:
  DOCKERFILE: ./Dockerfile
  BUILD_CONTEXT: .
  SERVICE_NAME: api
  IMAGE_REPO: sase-backend
  IMAGE_TAG: latest

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USER }}" --password-stdin

      - name: Normalize lowercase image URL
        id: lc
        run: |
          OWNER_LC=$(echo "${{ secrets.GHCR_USER }}" | tr '[:upper:]' '[:lower:]')
          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT
          echo "image=ghcr.io/${OWNER_LC}/${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Build and Push Production Docker Image
        run: |
          docker build -t "${{ steps.lc.outputs.image }}" -f "${{ env.DOCKERFILE }}" "${{ env.BUILD_CONTEXT }}"
          docker push "${{ steps.lc.outputs.image }}"

  deploy:
    needs: build-and-publish
    runs-on: ubuntu-latest

    steps:
      # If your EC2_SSH_KEY secret already contains the full private key block,
      # you can pass it directly to appleboy via the "key" field (no need to write a file).
      - name: Deploy to Production EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            # Compose command shim (supports both docker-compose and docker compose)
            if command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              DC="docker compose"
            fi

            # Log in to GHCR for private pulls
            echo "üîê Logging into GHCR"
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USER }}" --password-stdin

            # Pull and restart only the service (falls back to full stack if service not named)
            echo "üì¶ Pulling latest image and restarting"
            cd /opt/app
            if ! $DC pull ${{ env.SERVICE_NAME }}; then
              $DC pull
            fi
            if ! $DC up -d ${{ env.SERVICE_NAME }}; then
              $DC up -d
            fi

            # Cleanup old, dangling images
            echo "üßº Pruning dangling images"
            docker image prune -f
